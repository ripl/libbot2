#!/bin/bash

# This script will start a docker container that contains the requirements to
# build libbot2 (except LCM which is built as part of this process). It will
# then copy a script in the docker container that has been start, and run that
# script which builds and packages LCM, builds and packages libbot2, and copy
# the 2 deb archives in the current working directory before stopping and
# removing the docker container.

set -euxo pipefail

readonly timestamp=$(date -u +%Y%m%d)

export CPACK_OPEN_JRE_VERSION=7

docker build -t libbot2-trusty-prereqs $(git rev-parse --show-toplevel)/scripts/setup/linux/ubuntu/trusty/
docker run -t -d --name libbot2-trusty -e CPACK_OPEN_JRE_VERSION=${CPACK_OPEN_JRE_VERSION} libbot2-trusty-prereqs
docker cp $(git rev-parse --show-toplevel) libbot2-trusty:/tmp/libbot2
docker exec libbot2-trusty /tmp/libbot2/scripts/package/linux/ubuntu/common/build.sh ${timestamp}
docker cp libbot2-trusty:/tmp/lcm_1.3.95.${timestamp}-1_amd64.deb .
docker cp libbot2-trusty:/tmp/libbot2_0.0.1.${timestamp}-1_amd64.deb .
docker stop libbot2-trusty
docker rm libbot2-trusty

# Test package
docker run -t -d --name libbot2-trusty-test ubuntu:14.04
docker cp lcm_1.3.95.${timestamp}-1_amd64.deb libbot2-trusty-test:/tmp
docker cp libbot2_0.0.1.${timestamp}-1_amd64.deb libbot2-trusty-test:/tmp
docker cp $(git rev-parse --show-toplevel) libbot2-trusty-test:/tmp/libbot2
docker exec libbot2-trusty-test /tmp/libbot2/scripts/package/linux/ubuntu/common/test.sh ${timestamp}
docker stop libbot2-trusty-test
docker rm libbot2-trusty-test
